package main

import "strconv"

func isItemDefaultSelected(item Ranking, me string) string {
	if strconv.Itoa(item.Id) == me {
		return "selected"
	}

	return "false"
}

templ page(options []Ranking, tournamentOptions []TournamentOption) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"/>
			<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		</head>
		<body>
			<div>
				<form id="form">
					<div class="mb-3">
						<label for="me-select" class="form-label">You</label>
						<select id="me-select" form="form" name="me" list="me-options" class="form-control">
							for _, item := range options {
								<option value={ parseName(item.Name) }>{ parseName(item.Name) }</option>
							}
						</select>
					</div>
					<div class="mb-3">
						<label for="tournament-select" class="form-label">Tournament</label>
						<select id="tournament-select" form="form" name="tournament" class="form-control">
							for _, tournament := range tournamentOptions {
								<option value={ tournament.Id }>{ tournament.Name }</option>
							}
						</select>
					</div>
					<fieldset id="formFields">
						<legend>
							Opponents
						</legend>
						@opponent(options)
					</fieldset>
					<button id="add-opponent-button" type="button" class="btn btn-secondary">
						Add opponent
					</button>
					<button type="submit" class="btn btn-primary">
						Submit
					</button>
				</form>
				<div class="hidden" id="points-wrapper">
					<p>
						Points: <span id="points">0</span>
					</p>
				</div>
			</div>
		</body>
		<style>
		body {
			display: grid;
			place-items: center;
			height: 100vh;
		}

		form {
			width: 100%;
			min-width: 0px;
			margin: 0 auto;
		}

		@media (max-width: 768px) {
			form {
				width: 80%;
			}
		}

		p {
			text-align: center;
		}

		.grid {
			display: grid;
			place-items: center;
		}

		.opponent {
			display: flex;
		}

		.win {
			margin-left: 1rem;
			min-width: 60px;
		}

		.hidden {
			display: none;
		}

		#points-wrapper {
			margin-top: 1rem;
		}
		
	</style>
		<script type="text/javascript">
		document.getElementById("add-opponent-button").addEventListener("click",
			function(event) {
				event.preventDefault();
				addOpponent();
			}
		);

		function addOpponent() {
			const lastOpponent = document.getElementById("formFields").lastChild;
			const clonedOpponent = lastOpponent.cloneNode(true);
			const formFields = document.getElementById("formFields")
			formFields.appendChild(clonedOpponent);
			
			const key = document.getElementById("formFields").children.length - 2;
			const clonedElementInDom = document.getElementById("formFields").lastChild;
			
			const checkbox = clonedElementInDom.querySelector("input[type=\"checkbox\"]");
			checkbox.name = "win" + key;
			checkbox.id = "win" + key;
			checkbox.checked = true;

			clonedElementInDom.querySelector("label").for = "win" + key;

			const input = clonedElementInDom.querySelector("select");
			input.name = "opponent" + key;
			input.id = "opponent-select" + key;
		}

		const form = document.getElementById("form");
		form.addEventListener("submit", async (e) => {
			event.preventDefault();
			const data = new FormData(e.target);
			let resp = await fetch("/calculate", {
				method: "POST",
				headers: {
					"Content-Type": "application/x-www-form-urlencoded",
				},
				body: new URLSearchParams(data),
			});

			let res = await resp.json();
			document.getElementById("points").innerText = res.points;
			document.getElementById("points-wrapper").classList.remove("hidden");
		})
	</script>
	</html>
}

templ dropdown(items []Ranking) {
	<select id="opponent-select0" name="opponent0" form="form" type="text" class="form-control">
		for _, item := range items {
			<option value={ parseName(item.Name) }>{ parseName(item.Name) }</option>
		}
	</select>
}

templ opponent(options []Ranking) {
	<div id="opponent" class="mb-3 opponent">
		<div class="">
			@dropdown(options)
		</div>
		<div class="grid win">
			<div>
				<input class="form-check-input" type="checkbox" name="win0" id="win0" checked/>
				<label for="win0" class="form-check-label">Win?</label>
			</div>
		</div>
	</div>
}
